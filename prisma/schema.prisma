generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  username             String                @unique
  displayName          String                @map("display_name")
  avatarUrl            String?               @map("avatar_url")
  role                 Role                  @default(USER)
  emailVerified        Boolean               @default(false) @map("email_verified")
  password             String?
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  accounts             Account[]
  reportsReceived      ContentReport[]       @relation("ReportsReceived")
  reportsMade          ContentReport[]       @relation("ReportsMade")
  reportsReviewed      ContentReport[]       @relation("ReportsReviewed")
  receivedMessages     Message[]             @relation("MessageReceiver")
  sentMessages         Message[]             @relation("MessageSender")
  notifications        Notification[]
  pendingSubscriptions PendingSubscription[]
  processedRefunds     Refund[]
  reviewResponses      ReviewResponse[]
  reviewsReceived      Review[]              @relation("StudioOwnerReviews")
  reviews              Review[]
  savedSearches        SavedSearch[]
  sessions             Session[]
  studios              Studio[]
  subscriptions        Subscription[]
  connectedBy          UserConnection[]      @relation("ConnectedUser")
  connections          UserConnection[]      @relation("UserConnections")
  metadata             UserMetadata[]
  profile              UserProfile?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Studio {
  id                   String                @id @default(cuid())
  ownerId              String                @map("owner_id")
  name                 String
  description          String?
  studioType           StudioType            @map("studio_type")
  address              String?
  latitude             Decimal?              @db.Decimal(10, 8)
  longitude            Decimal?              @db.Decimal(11, 8)
  websiteUrl           String?               @map("website_url")
  phone                String?
  isPremium            Boolean               @default(false) @map("is_premium")
  isVerified           Boolean               @default(false) @map("is_verified")
  status               StudioStatus          @default(ACTIVE)
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  pendingSubscriptions PendingSubscription[]
  reviews              Review[]
  images               StudioImage[]
  services             StudioService[]
  owner                User                  @relation(fields: [ownerId], references: [id])

  @@map("studios")
}

model StudioService {
  id       String      @id @default(cuid())
  studioId String      @map("studio_id")
  service  ServiceType
  studio   Studio      @relation(fields: [studioId], references: [id], onDelete: Cascade)

  @@unique([studioId, service])
  @@map("studio_services")
}


model StudioImage {
  id        String  @id @default(cuid())
  studioId  String  @map("studio_id")
  imageUrl  String  @map("image_url")
  altText   String? @map("alt_text")
  sortOrder Int     @default(0) @map("sort_order")
  studio    Studio  @relation(fields: [studioId], references: [id], onDelete: Cascade)

  @@map("studio_images")
}

model Review {
  id          String          @id @default(cuid())
  studioId    String          @map("studio_id")
  reviewerId  String          @map("reviewer_id")
  ownerId     String          @map("owner_id")
  rating      Int             @db.SmallInt
  content     String?
  isAnonymous Boolean         @default(false) @map("is_anonymous")
  status      ReviewStatus    @default(PENDING)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  response    ReviewResponse?
  owner       User            @relation("StudioOwnerReviews", fields: [ownerId], references: [id])
  reviewer    User            @relation(fields: [reviewerId], references: [id])
  studio      Studio          @relation(fields: [studioId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model ReviewResponse {
  id        String   @id @default(cuid())
  reviewId  String   @unique @map("review_id")
  authorId  String   @map("author_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("review_responses")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String   @map("sender_id")
  receiverId String   @map("receiver_id")
  subject    String?
  content    String
  isRead     Boolean  @default(false) @map("is_read")
  createdAt  DateTime @default(now()) @map("created_at")
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])

  @@map("messages")
}

model UserConnection {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  connectedUserId String   @map("connected_user_id")
  accepted        Boolean  @default(false)
  createdAt       DateTime @default(now()) @map("created_at")
  connectedUser   User     @relation("ConnectedUser", fields: [connectedUserId], references: [id])
  user            User     @relation("UserConnections", fields: [userId], references: [id])

  @@unique([userId, connectedUserId])
  @@map("user_connections")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @map("user_id")
  stripeSubscriptionId String?            @unique @map("stripe_subscription_id")
  stripeCustomerId     String?            @map("stripe_customer_id")
  paypalSubscriptionId String?            @unique @map("paypal_subscription_id")
  paymentMethod        PaymentMethod      @default(STRIPE) @map("payment_method")
  status               SubscriptionStatus
  currentPeriodStart   DateTime?          @map("current_period_start")
  currentPeriodEnd     DateTime?          @map("current_period_end")
  cancelledAt          DateTime?          @map("cancelled_at")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")
  user                 User               @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model SavedSearch {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  filters   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved_searches")
}

model PendingSubscription {
  id                   String        @id @default(cuid())
  userId               String        @map("user_id")
  studioId             String        @map("studio_id")
  paypalSubscriptionId String?       @unique @map("paypal_subscription_id")
  stripeSessionId      String?       @unique @map("stripe_session_id")
  status               String        @default("PENDING_APPROVAL")
  paymentMethod        PaymentMethod @map("payment_method")
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @updatedAt @map("updated_at")
  studio               Studio        @relation(fields: [studioId], references: [id], onDelete: Cascade)
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pending_subscriptions")
}

model Refund {
  id                    String       @id @default(cuid())
  stripeRefundId        String       @unique @map("stripe_refund_id")
  stripePaymentIntentId String       @map("stripe_payment_intent_id")
  amount                Int
  currency              String
  reason                String?
  status                RefundStatus
  processedBy           String       @map("processed_by")
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")
  processedByUser       User         @relation(fields: [processedBy], references: [id])

  @@map("refunds")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  readAt    DateTime?        @map("read_at")
  actionUrl String?          @map("action_url")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ContentReport {
  id             String       @id @default(cuid())
  reporterId     String       @map("reporter_id")
  contentType    ContentType  @map("content_type")
  contentId      String       @map("content_id")
  reportedUserId String?      @map("reported_user_id")
  reason         ReportReason
  customReason   String?      @map("custom_reason")
  status         ReportStatus @default(PENDING)
  reviewedById   String?      @map("reviewed_by_id")
  reviewedAt     DateTime?    @map("reviewed_at")
  resolution     String?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  reportedUser   User?        @relation("ReportsReceived", fields: [reportedUserId], references: [id])
  reporter       User         @relation("ReportsMade", fields: [reporterId], references: [id])
  reviewedBy     User?        @relation("ReportsReviewed", fields: [reviewedById], references: [id])

  @@map("content_reports")
}

enum Role {
  USER
  STUDIO_OWNER
  ADMIN
}

enum StudioType {
  VOICEOVER
  RECORDING
  PODCAST
  PRODUCTION
  MOBILE
  HOME
}

enum ServiceType {
  ISDN
  SOURCE_CONNECT
  SOURCE_CONNECT_NOW
  CLEANFEED
  SESSION_LINK_PRO
  ZOOM
  SKYPE
  TEAMS
}

enum StudioStatus {
  DRAFT
  ACTIVE
  INACTIVE
  PENDING
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
  INCOMPLETE
  SUSPENDED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
}

enum RefundStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
}

enum NotificationType {
  MESSAGE_RECEIVED
  REVIEW_RECEIVED
  REVIEW_RESPONSE
  CONNECTION_REQUEST
  CONNECTION_ACCEPTED
  STUDIO_VERIFIED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  SUBSCRIPTION_EXPIRING
}

enum ContentType {
  REVIEW
  MESSAGE
  STUDIO
  USER
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  INAPPROPRIATE
  FAKE_INFO
  COPYRIGHT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

// Enhanced User Metadata Models
model UserMetadata {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  key       String
  value     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
  @@index([userId])
  @@index([key])
  @@map("user_metadata")
}

model UserProfile {
  id                     String   @id @default(cuid())
  userId                 String   @unique @map("user_id")
  
  // Professional Information
  studioName             String?  @map("studio_name")
  lastName               String?  @map("last_name")
  phone                  String?
  about                  String?
  shortAbout             String?  @map("short_about")
  location               String?
  
  // Pricing Information
  rateTier1              String?  @map("rate_tier_1")
  rateTier2              String?  @map("rate_tier_2")
  rateTier3              String?  @map("rate_tier_3")
  showRates              Boolean  @default(false) @map("show_rates")
  
  // Social Media Links
  facebookUrl            String?  @map("facebook_url")
  twitterUrl             String?  @map("twitter_url")
  linkedinUrl            String?  @map("linkedin_url")
  instagramUrl           String?  @map("instagram_url")
  youtubeUrl             String?  @map("youtube_url")
  vimeoUrl               String?  @map("vimeo_url")
  soundcloudUrl          String?  @map("soundcloud_url")
  
  // Professional Status
  isCrbChecked           Boolean  @default(false) @map("is_crb_checked")
  isFeatured             Boolean  @default(false) @map("is_featured")
  isSpotlight            Boolean  @default(false) @map("is_spotlight")
  verificationLevel      String   @default("none") @map("verification_level") // none, basic, verified, premium
  
  // Equipment & Studio
  homeStudioDescription  String?  @map("home_studio_description")
  equipmentList          String?  @map("equipment_list")
  servicesOffered        String?  @map("services_offered")
  
  // Contact Preferences
  showEmail              Boolean  @default(false) @map("show_email")
  showPhone              Boolean  @default(false) @map("show_phone")
  showAddress            Boolean  @default(false) @map("show_address")
  
  // Timestamps
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")
  
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isFeatured])
  @@index([isSpotlight])
  @@index([verificationLevel])
  @@map("user_profiles")
}

// Admin-specific models from vosf-old-site
model Faq {
  id         String @id @default(cuid())
  question   String
  answer     String
  sortOrder  Int?   @map("sort_order")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("faq")
}

model Contact {
  id        String   @id @default(cuid())
  user1     String
  user2     String
  accepted  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contacts")
}

model Poi {
  id          String   @id @default(cuid())
  name        String
  description String?
  latitude    Decimal? @db.Decimal(10, 8)
  longitude   Decimal? @db.Decimal(11, 8)
  address     String?
  category    String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("poi")
}
