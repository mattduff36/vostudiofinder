generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                  String  @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  users               users   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model contacts {
  id         String   @id
  user1      String
  user2      String
  accepted   Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime
}

model content_reports {
  id                                            String       @id
  reporter_id                                   String
  content_type                                  ContentType
  content_id                                    String
  reported_user_id                              String?
  reason                                        ReportReason
  custom_reason                                 String?
  status                                        ReportStatus @default(PENDING)
  reviewed_by_id                                String?
  reviewed_at                                   DateTime?
  resolution                                    String?
  created_at                                    DateTime     @default(now())
  updated_at                                    DateTime
  users_content_reports_reported_user_idTousers users?       @relation("content_reports_reported_user_idTousers", fields: [reported_user_id], references: [id])
  users_content_reports_reporter_idTousers      users        @relation("content_reports_reporter_idTousers", fields: [reporter_id], references: [id])
  users_content_reports_reviewed_by_idTousers   users?       @relation("content_reports_reviewed_by_idTousers", fields: [reviewed_by_id], references: [id])
}

model faq {
  id         String   @id
  question   String
  answer     String
  sort_order Int?
  created_at DateTime @default(now())
  updated_at DateTime
}

model messages {
  id                                String   @id
  sender_id                         String
  receiver_id                       String
  subject                           String?
  content                           String
  is_read                           Boolean  @default(false)
  created_at                        DateTime @default(now())
  users_messages_receiver_idTousers users    @relation("messages_receiver_idTousers", fields: [receiver_id], references: [id])
  users_messages_sender_idTousers   users    @relation("messages_sender_idTousers", fields: [sender_id], references: [id])
}

model notifications {
  id         String           @id
  user_id    String
  type       NotificationType
  title      String
  message    String
  data       Json?
  read       Boolean          @default(false)
  read_at    DateTime?
  action_url String?
  created_at DateTime         @default(now())
  updated_at DateTime
  users      users            @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model pending_subscriptions {
  id                     String        @id
  user_id                String
  studio_id              String
  paypal_subscription_id String?       @unique
  stripe_session_id      String?       @unique
  status                 String        @default("PENDING_APPROVAL")
  payment_method         PaymentMethod
  created_at             DateTime      @default(now())
  updated_at             DateTime
  studios                studios       @relation(fields: [studio_id], references: [id], onDelete: Cascade)
  users                  users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model poi {
  id          String   @id
  name        String
  description String?
  latitude    Decimal? @db.Decimal(10, 8)
  longitude   Decimal? @db.Decimal(11, 8)
  address     String?
  category    String?
  created_at  DateTime @default(now())
  updated_at  DateTime
}

model refunds {
  id                       String       @id
  stripe_refund_id         String       @unique
  stripe_payment_intent_id String
  amount                   Int
  currency                 String
  reason                   String?
  status                   RefundStatus
  processed_by             String
  created_at               DateTime     @default(now())
  updated_at               DateTime
  users                    users        @relation(fields: [processed_by], references: [id])
}

model review_responses {
  id         String   @id
  review_id  String   @unique
  author_id  String
  content    String
  created_at DateTime @default(now())
  updated_at DateTime
  users      users    @relation(fields: [author_id], references: [id], onDelete: Cascade)
  reviews    reviews  @relation(fields: [review_id], references: [id], onDelete: Cascade)
}

model reviews {
  id                               String            @id
  studio_id                        String
  reviewer_id                      String
  owner_id                         String
  rating                           Int               @db.SmallInt
  content                          String?
  is_anonymous                     Boolean           @default(false)
  status                           ReviewStatus      @default(PENDING)
  created_at                       DateTime          @default(now())
  updated_at                       DateTime
  review_responses                 review_responses?
  users_reviews_owner_idTousers    users             @relation("reviews_owner_idTousers", fields: [owner_id], references: [id])
  users_reviews_reviewer_idTousers users             @relation("reviews_reviewer_idTousers", fields: [reviewer_id], references: [id])
  studios                          studios           @relation(fields: [studio_id], references: [id], onDelete: Cascade)
}

model saved_searches {
  id         String   @id
  user_id    String
  name       String
  filters    String
  created_at DateTime @default(now())
  updated_at DateTime
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model sessions {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  users         users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model studio_images {
  id         String  @id
  studio_id  String
  image_url  String
  alt_text   String?
  sort_order Int     @default(0)
  studios    studios @relation(fields: [studio_id], references: [id], onDelete: Cascade)
}

model studio_services {
  id        String      @id
  studio_id String
  service   ServiceType
  studios   studios     @relation(fields: [studio_id], references: [id], onDelete: Cascade)

  @@unique([studio_id, service])
}

model studio_studio_types {
  id          String     @id
  studio_id   String
  studio_type StudioType
  studios     studios    @relation(fields: [studio_id], references: [id], onDelete: Cascade)

  @@unique([studio_id, studio_type])
}

model studios {
  id                    String                  @id
  owner_id              String
  name                  String
  description           String?
  address               String?
  latitude              Decimal?                @db.Decimal(10, 8)
  longitude             Decimal?                @db.Decimal(11, 8)
  website_url           String?
  phone                 String?
  is_premium            Boolean                 @default(false)
  is_verified           Boolean                 @default(false)
  status                StudioStatus            @default(ACTIVE)
  created_at            DateTime                @default(now())
  updated_at            DateTime
  pending_subscriptions pending_subscriptions[]
  reviews               reviews[]
  studio_images         studio_images[]
  studio_services       studio_services[]
  studio_studio_types   studio_studio_types[]
  users                 users                   @relation(fields: [owner_id], references: [id])
}

model subscriptions {
  id                     String             @id
  user_id                String
  stripe_subscription_id String?            @unique
  stripe_customer_id     String?
  paypal_subscription_id String?            @unique
  payment_method         PaymentMethod      @default(STRIPE)
  status                 SubscriptionStatus
  current_period_start   DateTime?
  current_period_end     DateTime?
  cancelled_at           DateTime?
  created_at             DateTime           @default(now())
  updated_at             DateTime
  users                  users              @relation(fields: [user_id], references: [id])
}

model user_connections {
  id                                              String   @id
  user_id                                         String
  connected_user_id                               String
  accepted                                        Boolean  @default(false)
  created_at                                      DateTime @default(now())
  users_user_connections_connected_user_idTousers users    @relation("user_connections_connected_user_idTousers", fields: [connected_user_id], references: [id])
  users_user_connections_user_idTousers           users    @relation("user_connections_user_idTousers", fields: [user_id], references: [id])

  @@unique([user_id, connected_user_id])
}

model user_metadata {
  id         String   @id
  user_id    String
  key        String
  value      String?
  created_at DateTime @default(now())
  updated_at DateTime
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, key])
  @@index([key])
  @@index([user_id])
}

model user_profiles {
  id                      String   @id
  user_id                 String   @unique
  last_name               String?
  phone                   String?
  about                   String?
  short_about             String?
  location                String?
  rate_tier_1             String?
  rate_tier_2             String?
  rate_tier_3             String?
  show_rates              Boolean  @default(false)
  facebook_url            String?
  twitter_url             String?
  linkedin_url            String?
  instagram_url           String?
  youtube_url             String?
  vimeo_url               String?
  soundcloud_url          String?
  is_crb_checked          Boolean  @default(false)
  is_featured             Boolean  @default(false)
  is_spotlight            Boolean  @default(false)
  verification_level      String   @default("none")
  home_studio_description String?
  equipment_list          String?
  services_offered        String?
  show_email              Boolean  @default(false)
  show_phone              Boolean  @default(false)
  show_address            Boolean  @default(false)
  created_at              DateTime @default(now())
  updated_at              DateTime
  studio_name             String?
  connection1             String?  @db.VarChar(10)
  connection2             String?  @db.VarChar(10)
  connection3             String?  @db.VarChar(10)
  connection4             String?  @db.VarChar(10)
  connection5             String?  @db.VarChar(10)
  connection6             String?  @db.VarChar(10)
  connection7             String?  @db.VarChar(10)
  connection8             String?  @db.VarChar(10)
  users                   users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([is_featured])
  @@index([is_spotlight])
  @@index([verification_level])
}

model users {
  id                                                         String                  @id
  email                                                      String                  @unique
  username                                                   String                  @unique
  display_name                                               String
  avatar_url                                                 String?
  role                                                       Role                    @default(USER)
  email_verified                                             Boolean                 @default(false)
  password                                                   String?
  created_at                                                 DateTime                @default(now())
  updated_at                                                 DateTime
  accounts                                                   accounts[]
  content_reports_content_reports_reported_user_idTousers    content_reports[]       @relation("content_reports_reported_user_idTousers")
  content_reports_content_reports_reporter_idTousers         content_reports[]       @relation("content_reports_reporter_idTousers")
  content_reports_content_reports_reviewed_by_idTousers      content_reports[]       @relation("content_reports_reviewed_by_idTousers")
  messages_messages_receiver_idTousers                       messages[]              @relation("messages_receiver_idTousers")
  messages_messages_sender_idTousers                         messages[]              @relation("messages_sender_idTousers")
  notifications                                              notifications[]
  pending_subscriptions                                      pending_subscriptions[]
  refunds                                                    refunds[]
  review_responses                                           review_responses[]
  reviews_reviews_owner_idTousers                            reviews[]               @relation("reviews_owner_idTousers")
  reviews_reviews_reviewer_idTousers                         reviews[]               @relation("reviews_reviewer_idTousers")
  saved_searches                                             saved_searches[]
  sessions                                                   sessions[]
  studios                                                    studios[]
  subscriptions                                              subscriptions[]
  user_connections_user_connections_connected_user_idTousers user_connections[]      @relation("user_connections_connected_user_idTousers")
  user_connections_user_connections_user_idTousers           user_connections[]      @relation("user_connections_user_idTousers")
  user_metadata                                              user_metadata[]
  user_profiles                                              user_profiles?
}

enum ContentType {
  REVIEW
  MESSAGE
  STUDIO
  USER
}

enum NotificationType {
  MESSAGE_RECEIVED
  REVIEW_RECEIVED
  REVIEW_RESPONSE
  CONNECTION_REQUEST
  CONNECTION_ACCEPTED
  STUDIO_VERIFIED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  SUBSCRIPTION_EXPIRING
}

enum PaymentMethod {
  STRIPE
  PAYPAL
}

enum RefundStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  INAPPROPRIATE
  FAKE_INFO
  COPYRIGHT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  USER
  STUDIO_OWNER
  ADMIN
}

enum ServiceType {
  ISDN
  SOURCE_CONNECT
  SOURCE_CONNECT_NOW
  CLEANFEED
  SESSION_LINK_PRO
  ZOOM
  SKYPE
  TEAMS
}

enum StudioStatus {
  DRAFT
  ACTIVE
  INACTIVE
  PENDING
}

enum StudioType {
  HOME
  RECORDING
  VO_COACH
  EDITING
  PODCAST
  VOICEOVER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
  INCOMPLETE
  SUSPENDED
}
